{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","newtext","split","join","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","trim","filter","element","length","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","body","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2f137165.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">\r\n                About\r\n              </a>\r\n            </li> */}\r\n          </ul>\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string.isRequired };\r\nNavbar.defaultProps = { title: \"Default Title\" };\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase!\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    // console.log(\"Uppercase was clicked\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase!\", \"success\");\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setText(\"\");\r\n    props.showAlert(\"Text Cleared!\", \"success\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    text.setSelectionRange(0, 9999);\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to clipboard!\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newtext = text.split(/[ ]+/);\r\n    setText(newtext.join(\" \"));\r\n    props.showAlert(\"Extra spaces Removed!\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"OnChange\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"light\" ? \"#042743\" : \"white\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"light\" ? \"white\" : \"grey\",\r\n              color: props.mode === \"light\" ? \"#042743\" : \"white\",\r\n            }}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary m-2\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary m-2\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary m-2\" onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button className=\"btn btn-primary m-2\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary m-2\" onClick={handleClear}>\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"light\" ? \"#042743\" : \"white\" }}\r\n      >\r\n        <h2>Your Text Summary</h2>\r\n        <p>\r\n          {\r\n            text\r\n              .trim()\r\n              .split(\" \")\r\n              .filter(function (element) {\r\n                return element !== \"\";\r\n              }).length\r\n          }{\" \"}\r\n          words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes Read</p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter something in the textbox above to preview it here \"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport Textform from \"./components/Textform\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n    }\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <Textform\n          mode={mode}\n          showAlert={showAlert}\n          heading=\"Enter The Text To Analyze Below\"\n        />\n        {/* <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <Textform\n                mode={mode}\n                showAlert={showAlert}\n                heading=\"Enter The Text To Analyze Below\"\n              />\n            }\n          />\n          <Route path=\"about/*\" element={<About />} />\n        </Routes> */}\n      </div>\n      {/*  </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}